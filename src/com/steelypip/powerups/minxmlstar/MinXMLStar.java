/**
 * Copyright Stephen Leach, 2014
 * This file is part of the MinXML for Java library.
 * 
 * MinXML for Java is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Foobar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MinXML for Java.  If not, see <http://www.gnu.org/licenses/>.
 *  
 */
package com.steelypip.powerups.minxmlstar;

import java.io.PrintWriter;
import java.io.Writer;
import java.util.Map;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import com.steelypip.powerups.common.Pair;

/**
 * MinXMLStar is a multi-valued extension of MinXML that, in its 
 * turn, is a cleaner, leaner, cut-down version of XML with only the
 * absolute essentials. An MinXMLStar object is a single element that 
 * represents a tree of nodes, where each node is a named, multi-valued 
 * dictionary. The MinXMLStar interface defines a standard interface 
 * for all classes representing MinXMLStar elements.
 * 
 * @author Stephen Leach
 */
public interface MinXMLStar extends Named, MultiAttributes, MultiLinks, Iterable< MinXMLStar.Link > {
	
	public interface Attr extends Pair< @NonNull String, @NonNull String > {
		@NonNull String getKey();
		int getKeyIndex();
		@NonNull String getValue();
		
		default @NonNull String getFirst() {
			return this.getKey();
		}
		
		default @NonNull String getSecond() {
			return this.getValue();
		}
		
		default void setFirst( @NonNull String x ) {
			throw new UnsupportedOperationException();
		}
		
		default void setSecond(@NonNull String x ) {
			throw new UnsupportedOperationException();
		}
	}

	public interface Link extends Pair< @NonNull String, @NonNull MinXMLStar > {
		@NonNull String getField();
		@NonNull Integer getFieldIndex();
		@NonNull MinXMLStar getChild();
	
		default @NonNull String getFirst() {
			return this.getField();
		}
		
		default @NonNull MinXMLStar getSecond() {
			return this.getChild();
		}
		
		default void setFirst( @NonNull String x ) {
			throw new UnsupportedOperationException();
		}
		
		default void setSecond( @NonNull MinXMLStar x ) {
			throw new UnsupportedOperationException();
		}
	}
	
	/**
	 * This method signals that there will be no further updates to an element, at least for a while, 
	 * and the implementation should consider this a good opportunity to compact the space used
	 * by this element and all child elements, including any shared elements. Implementations
	 * must be clear on whether any subsequent updates are allowed or forbidden. If subsequent updates
	 * are forbidden, the implementation must throw an {@link IllegalStateException}.
	 */
	void trimToSize();
	
	boolean equals( Object obj );
	
	/**
	 * Renders the element using the supplied {@link PrintWriter}. The rendering will
	 * not contain any newlines. This is the same as the string generated by toString(). 
	 * 
	 * @param pw the {@link PrintWriter} to use.
	 */
	void print( PrintWriter pw );
	
	/**
	 * Renders the element to the supplied {@link java.io.Writer}.
	 * 
	 * @param w the {@link Writer} to use.
	 */
	void print( Writer w );
	
	/**
	 * Renders the element using the supplied {@link PrintWriter} such that each start and 
	 * end tag are on their own line and the children indented. The output always finishes
	 * with a newline.
	 * 
	 * @param pw the {@link PrintWriter} to use.
	 */
	void prettyPrint( PrintWriter pw );
	
	/**
	 * Renders the element using the supplied {@link java.io.Writer} such that each start and 
	 * end tag are on their own line and the children indented. The output always finishes
	 * with a newline.
	 * 
	 * @param w the {@link Writer} to use.
	 */
	void prettyPrint( Writer w );
	

	
	/**
	 * shallowCopy makes a copy of the topmost node but shares the children. The
	 * implementation of the new node must be at least as general as the implementation
	 * of this node i.e. implement all the methods that do not raise 
	 * {@link java.lang.UnsupportedOperationException} 
	 * @return a shallow copy
	 */
	@NonNull MinXMLStar shallowCopy();
	 
	/**
	 * deepCopy makes a copy of the topmost node and all the children. The
	 * implementation of the new nodes must be at least as general as the implementation
	 * of this node i.e. implement all the methods that do not raise 
	 * {@link java.lang.UnsupportedOperationException} 
	 * @return a deep copy
	 */
	@NonNull MinXMLStar deepCopy();
}
